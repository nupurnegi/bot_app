import { CommonModule } from '@angular/common';
import { Injectable, Pipe, InjectionToken, NgModule, Inject } from '@angular/core';
import * as linkify from 'linkifyjs';
import { find, test } from 'linkifyjs';
import hashtag from 'linkifyjs/plugins/hashtag';
import mention from 'linkifyjs/plugins/mention';
import linkifyStr from 'linkifyjs/string';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
class NgxLinkifyjsService {
    constructor() {
    }
    /**
     * Convert the passed text as a string to an appropriate url
     *
     * @param {?} text - the string to convert
     * @param {?=} options - options to pass it to the linkifyjs library
     * @return {?}
     */
    linkify(text, options) {
        // @ts-ignore
        return text.linkify(options);
    }
    /**
     * Find any links in a given text as a string
     *
     * @param {?} text - the string to find some links
     * @return {?}
     */
    find(text) {
        return find(text);
    }
    /**
     * Test if a given value or array of values are links
     *
     * @param {?} value - the value to test
     * @return {?}
     */
    test(value) {
        if (typeof value === 'string') {
            return test(value);
        }
        return test(...value);
    }
}
NgxLinkifyjsService.ɵfac = function NgxLinkifyjsService_Factory(t) { return new (t || NgxLinkifyjsService)(); };
NgxLinkifyjsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NgxLinkifyjsService, factory: NgxLinkifyjsService.ɵfac });
/** @nocollapse */
NgxLinkifyjsService.ctorParameters = () => [];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxLinkifyjsService, [{
        type: Injectable
    }], function () { return []; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxLinkifyjsPipe {
    /**
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    transform(value, options) {
        return value ? linkifyStr(value, options) : value;
    }
}
NgxLinkifyjsPipe.ɵfac = function NgxLinkifyjsPipe_Factory(t) { return new (t || NgxLinkifyjsPipe)(); };
NgxLinkifyjsPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: "linkify", type: NgxLinkifyjsPipe, pure: true });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxLinkifyjsPipe, [{
        type: Pipe,
        args: [{
                name: 'linkify'
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const LinkType = {
    URL: 'url',
    HASHTAG: 'hashtag',
    MENTION: 'mention',
    EMAIL: 'email',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const NgxLinkifyjsConfigToken = new InjectionToken('NgxLinkifyjsConfig');
/** @type {?} */
const DEFAULT_CONFIG = { enableHash: true, enableMention: true };
class NgxLinkifyjsModule {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        if (config.enableHash) {
            hashtag(linkify);
        }
        if (config.enableMention) {
            mention(linkify);
        }
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config = DEFAULT_CONFIG) {
        return {
            ngModule: NgxLinkifyjsModule,
            providers: [
                NgxLinkifyjsService,
                {
                    provide: NgxLinkifyjsConfigToken,
                    useValue: config
                },
            ]
        };
    }
}
NgxLinkifyjsModule.ɵfac = function NgxLinkifyjsModule_Factory(t) { return new (t || NgxLinkifyjsModule)(ɵngcc0.ɵɵinject(NgxLinkifyjsConfigToken)); };
NgxLinkifyjsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgxLinkifyjsModule });
NgxLinkifyjsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule
        ]] });
/** @nocollapse */
NgxLinkifyjsModule.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NgxLinkifyjsConfigToken,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxLinkifyjsModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                exports: [NgxLinkifyjsPipe],
                declarations: [NgxLinkifyjsPipe]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [NgxLinkifyjsConfigToken]
            }] }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxLinkifyjsModule, { declarations: function () { return [NgxLinkifyjsPipe]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NgxLinkifyjsPipe]; } }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { LinkType, NgxLinkifyjsPipe, NgxLinkifyjsService, NgxLinkifyjsConfigToken, DEFAULT_CONFIG, NgxLinkifyjsModule };

//# sourceMappingURL=ngx-linkifyjs.js.map