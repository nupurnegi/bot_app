{"version":3,"file":"ngx-linkifyjs.js","sources":["../../tmp/module/service/ngx-linkifyjs.service.ts","../../tmp/module/pipes/ngx-linkifyjs.pipe.ts","../../tmp/module/enum/linktype.enum.ts","../../tmp/module/ngx-linkifyjs.module.ts"],"names":["linkify.find","linkify.test"],"mappings":";;;;;;;;;;;;;AAAA,MAOa,mBAAmB;AAChC,IAAE;AACF,KAAG;AACH;AAEC;AACE;AACE;AACM;AAEC;AAAmB;AAAQ,IAArC,OAAO,CAAC,IAAY,EAAE,OAA2B;AAAI;AACzC,QACV,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACjC,KAAG;AACH;AAEC;AACE;AACE;AAEA;AAAmB;AAAQ,IAA9B,IAAI,CAAC,IAAY;AAAI,QACnB,OAAOA,IAAY,CAAC,IAAI,CAAC,CAAC;AAC9B,KAAG;AACH;AAEC;AACE;AACE;AAEA;AAAmB;AAAQ,IAA9B,IAAI,CAAC,KAAwB;AAAI,QAC/B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;AACnC,YAAM,OAAOC,IAAY,CAAC,KAAK,CAAC,CAAC;AACjC,SAAK;AACL,QAAI,OAAOA,IAAY,CAAC,GAAG,KAAK,CAAC,CAAC;AAClC,KAAG;AACH;+CApCC,UAAU;uIACR;AAAC;AAAmB;;;gDAKlB;AAAC;AAAC;AAAI;AAAkC;AAGR;ACfrC,MASa,gBAAgB;AAAG;AAAQ;AAElC;AAA2B;AAAmB;AAAQ,IAA1D,SAAS,CAAC,KAAa,EAAE,OAA2B;AAAI,QACtD,OAAO,KAAK,GAAG,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,GAAG,KAAK,CAAC;AACtD,KAAG;AACH;4CARC,IAAI,SAAC,kBACJ,IAAI,EAAE,SAAS;AAChB;;;;;;0BACK;AAAC;AAAC;AAAI;AAAkC;AAGvB;AAAI;AAAsB;AAI3C,ICfJ,KAAM,KAAK;AACb,IAAE,SAAU,SAAS;AACrB,IAAE,SAAU,SAAS;AACrB,IAAE,OAAQ,OAAO;AACjB;AACC;AAAC;AAAI;AAAkC;AAAqG;ACN7I;AAqBA,MAAa,uBAAuB,GAAG,IAAI,cAAc,CAAqB,oBAAoB,CAAC;AACnG;AAAA,MAAa,cAAc,GAAuB,EAAC,UAAU,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAC;AASzF,MAAa,kBAAkB;AAC/B;AACO;AAAyB;AAAQ,IActC,YACmB,MAA0B;AAC/C,QADqB,WAAM,GAAN,MAAM,CAAoB;AAAC,QAC5C,IAAI,MAAM,CAAC,UAAU,EAAE;AAC3B,YAAM,OAAO,CAAC,OAAO,CAAC,CAAC;AACvB,SAAK;AACL,QACI,IAAI,MAAM,CAAC,aAAa,EAAE;AAC9B,YAAM,OAAO,CAAC,OAAO,CAAC,CAAC;AACvB,SAAK;AACL,KAAG;AACH;AAEK;AAA0B;AAAmB;AAAQ,IA1BxD,OAAO,OAAO,CAAC,SAA6B,cAAc;AAAI,QAC5D,OAAO;AACX,YAAM,QAAQ,EAAE,kBAAkB;AAClC,YAAM,SAAS,EACP;AACR,gBAAU,mBAAmB;AAC7B,gBAAU;AACV,oBAAY,OAAO,EAAE,uBAAuB;AAC5C,oBAAY,QAAQ,EAAE,MAAM;AAC5B,iBAAW;AACX,aAAS;AACT,SAAK,CAAC;AACN,KAAG;AACH;8CAtBC,QAAQ,SAAC,kBACR,OAAO,EAAE,sBACP,YAAY,kBACb;UACD,OAAO,EAAE,CAAC,gBAAgB,CAAC,kBAC3B,YAAY,EAAE,CAAC,gBAAgB,CAAC;MACjC;;cACK;AAAC;AAAmB;AAES,4CAcpB,MAAM,SAAC,uBAAuB;AACvC;;;;;;;;;;;;;;0RAAE;AAAC;AAAC;AAAI;AAAkC;AAM1C;AAAI;AAAC;AAAI;AAKH;AAAqG;AAAI;AAAC;AAAyH","sourcesContent":["import {Injectable} from '@angular/core';\n// @ts-ignore\nimport * as linkify from 'linkifyjs';\nimport {Link} from '../..';\nimport {NgxLinkifyOptions} from '../interfaces/ngx-linkifyjs.interface';\n\n@Injectable()\nexport class NgxLinkifyjsService {\n  constructor() {\n  }\n\n  /**\n   * Convert the passed text as a string to an appropriate url\n   *\n   * @param text - the string to convert\n   * @param options - options to pass it to the linkifyjs library\n   */\n  linkify(text: string, options?: NgxLinkifyOptions): string {\n    // @ts-ignore\n    return text.linkify(options);\n  }\n\n  /**\n   * Find any links in a given text as a string\n   *\n   * @param text - the string to find some links\n   */\n  find(text: string): Array<Link> {\n    return linkify.find(text);\n  }\n\n  /**\n   * Test if a given value or array of values are links\n   *\n   * @param value - the value to test\n   */\n  test(value: string | string[]): boolean {\n    if (typeof value === 'string') {\n      return linkify.test(value);\n    }\n    return linkify.test(...value);\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n// @ts-ignore\nimport linkifyStr from 'linkifyjs/string';\nimport {NgxLinkifyOptions} from '../..';\n\n@Pipe({\n  name: 'linkify'\n})\nexport class NgxLinkifyjsPipe implements PipeTransform {\n\n  transform(value: string, options?: NgxLinkifyOptions): string {\n    return value ? linkifyStr(value, options) : value;\n  }\n\n}\n","export enum LinkType {\n  URL = 'url',\n  HASHTAG = 'hashtag',\n  MENTION = 'mention',\n  EMAIL = 'email',\n}\n","import {CommonModule} from '@angular/common';\nimport {Inject, InjectionToken, ModuleWithProviders, NgModule} from '@angular/core';\n// @ts-ignore\nimport * as linkify from 'linkifyjs';\n// @ts-ignore\nimport hashtag from 'linkifyjs/plugins/hashtag';\n// @ts-ignore\nimport mention from 'linkifyjs/plugins/mention';\n\nimport {NgxLinkifyjsService} from './service/ngx-linkifyjs.service';\nimport {NgxLinkifyjsPipe} from './pipes/ngx-linkifyjs.pipe';\n\n// Export module's public API\nexport {Link} from './interfaces/ngx-linkifyjs.interface';\nimport {NgxLinkifyjsConfig} from './interfaces/ngx-linkifyjs.interface';\n\nexport {LinkType} from './enum/linktype.enum';\nexport {NgxLinkifyOptions} from './interfaces/ngx-linkifyjs.interface';\nexport {NgxLinkifyjsPipe} from './pipes/ngx-linkifyjs.pipe';\nexport {NgxLinkifyjsService} from './service/ngx-linkifyjs.service';\n\nexport const NgxLinkifyjsConfigToken = new InjectionToken<NgxLinkifyjsConfig>('NgxLinkifyjsConfig');\nexport const DEFAULT_CONFIG: NgxLinkifyjsConfig = {enableHash: true, enableMention: true};\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  exports: [NgxLinkifyjsPipe],\n  declarations: [NgxLinkifyjsPipe]\n})\nexport class NgxLinkifyjsModule {\n\n  static forRoot(config: NgxLinkifyjsConfig = DEFAULT_CONFIG): ModuleWithProviders {\n    return {\n      ngModule: NgxLinkifyjsModule,\n      providers:\n        [\n          NgxLinkifyjsService,\n          {\n            provide: NgxLinkifyjsConfigToken,\n            useValue: config\n          },\n        ]\n    };\n  }\n\n  constructor(@Inject(NgxLinkifyjsConfigToken)\n              public config: NgxLinkifyjsConfig) {\n    if (config.enableHash) {\n      hashtag(linkify);\n    }\n\n    if (config.enableMention) {\n      mention(linkify);\n    }\n  }\n\n}\n"]}